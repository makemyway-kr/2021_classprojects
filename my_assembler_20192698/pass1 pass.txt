	for (int i = 0; i < token_line; i++)
	{
		if (i == 0)
		{
			starting_add = token_table[i]->operand[0];
			locctr = starting_add;
		}
		else
		{
			locctr = 0;
		}
		if (token_table[i]->comment[0] != ".")//코멘트 라인이 아니면
		{
			if (token_table[i]->label != NULL)
			{
				for (int j = 0; j < count_of_sym; j++)
				{
					if (strcmp(sym_table[j].symbol, token_table[i]->label) == 0)
					{
						return -1;
					}
					else
					{
						strcpy(sym_table[count_of_sym].symbol, token_table[i]->label);
						sym_table[count_of_sym].addr = locctr;
					}
				}
			}
			if (search_opcode(token_table[i]->operator) >= 0)
			{
				locctr += 3;
			}
			else if (strcmp("WORD", token_table[i]->operator) == 0)
			{
				locctr += 3;
			}
			else if (strcmp("RESW", token_table[i]->operator) == 0 || strcmp("RESB", token_table[i]->operator) == 0)
			{
				int tc = 0;
				for (int l = 0; l < MAX_OPERAND; l++)
				{
					if (token_table[i]->operand[l] != NULL)
					{
						tc++;
					}
				}
				locctr += 3 * tc;
			}
			else if (strcmp("BYTE", token_table[i]->operator))
			{
				locctr += 1;
			}
				
			
		}


	}