int err = 0;
	char* temp;
	for (int i = 0; i < line_num; i++)
	{
		if (input_data[i][0] == "\t")//레이블이 없어 tab이 앞에 있는 경우
		{
			temp = strtok(input_data[i], "\t");
			int count = 1;
			while (temp != NULL)
			{
				if (count == 1)
				{
					strcpy(token_table[i]->operator,temp);
				}
				else if (count == 2)
				{
					int check[5] = {0,};
					int c = 1;
					for (int k = 1; k < strlen(input_data[i]); k++)
					{
						if (input_data[i][k] == "\t")
						{
							check[c] = k;
							c++;
						}
					}
					for (int k = 1; k < 4; k++)
					{
						if (check[k] == "\t" && check[k + 1] == "\t")
						{
							c = 1000;
							break;
							
						}
						
						
					}
					if (c == 1000)//두개연속 tab,즉 operand가 존재하지 않는 경우
					{
						strcpy(token_table[i]->comment, temp);
					}
					else
					{
						char* t2 = strtok(temp, ",");
						int j = 0;
						while (t2 != NULL)
						{
							strcpy(token_table[i]->operand[j], t2);
							t2=strtok(NULL, ",");
							j++;
						}
						
					}
					
				}
				else if (count == 3)
				{
					strcpy(token_table[i]->comment, temp);
				}
				temp = strtok(NULL, "\t");
				count++;
			}
		}
		else if (input_data[i][0] == ".")//.으로 시작하는 경우
		{
			strcpy(token_table[i]->comment, input_data[i]);

		}
		else//label이 존재하는 경우
		{
			temp = strtok(input_data[i], "\t");
			int count = 0;
			while (temp != NULL)
			{
				if (count == 0)
				{
					strcpy(token_table[i]->label, temp);
				}
				else if (count == 1)
				{
					strcpy(token_table[i]->operator,temp);

				}
				else if (count == 2)
				{
					char* t2 = strtok(temp, ",");
					int j = 0;
					while (t2 != NULL)
					{
						strcpy(token_table[i]->operand[j], t2);
						t2 = strtok(NULL, ",");
						j++;
					}
				}
				else
				{
					strcpy(token_table[i]->comment, temp);
				}
				temp = strtok(NULL, "\t");
				count++;
			}
		}
	}
	token_line = line_num;